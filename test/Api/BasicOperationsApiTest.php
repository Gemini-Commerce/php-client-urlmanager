<?php
/**
 * BasicOperationsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  GeminiCommerce\Urlmanager
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Url Manager Service
 *
 * The URL Manager service provides a set of APIs for managing URL rewrites within your application. URL rewriting is a technique used to modify the appearance or structure of URLs while maintaining the functionality and accessibility of the underlying resources.  The URL Manager service offers various operations to create, retrieve, update, and delete URL rewrite configurations. These configurations allow you to define rules that map incoming URLs to different paths or destinations based on specific criteria. By using URL rewriting, you can enhance the user experience, improve SEO (Search Engine Optimization), and manage complex URL structures effectively.  To get started with the URL Manager service, you need to integrate the provided Proto API into your application. The API supports various programming languages and frameworks, making it easy to incorporate URL rewriting functionality into your existing codebase.  Once integrated, you can utilize the different API methods to create, manage, and query URL rewrite configurations based on your application's requirements.  Refer to the API documentation for detailed information on the request and response formats, authentication requirements, and example usage of each API method.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace GeminiCommerce\Urlmanager\Test\Api;

use \GeminiCommerce\Urlmanager\Configuration;
use \GeminiCommerce\Urlmanager\ApiException;
use \GeminiCommerce\Urlmanager\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * BasicOperationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  GeminiCommerce\Urlmanager
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BasicOperationsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for urlManagerChangeUrlRewriteRequestPath
     *
     * Change Url Rewrite Request Path.
     *
     */
    public function testUrlManagerChangeUrlRewriteRequestPath()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerChangeUrlRewriteRequestPath2
     *
     * Change Url Rewrite Request Path.
     *
     */
    public function testUrlManagerChangeUrlRewriteRequestPath2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerCreateUrlRewrite
     *
     * Create Url Rewrite.
     *
     */
    public function testUrlManagerCreateUrlRewrite()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerCreateUrlRewrite2
     *
     * Create Url Rewrite.
     *
     */
    public function testUrlManagerCreateUrlRewrite2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerDeleteUrlRewrite
     *
     * Delete Url Rewrite.
     *
     */
    public function testUrlManagerDeleteUrlRewrite()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerDeleteUrlRewrite2
     *
     * Delete Url Rewrite.
     *
     */
    public function testUrlManagerDeleteUrlRewrite2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerGetUrlRewrite
     *
     * Get Url Rewrite.
     *
     */
    public function testUrlManagerGetUrlRewrite()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerGetUrlRewrite2
     *
     * Get Url Rewrite.
     *
     */
    public function testUrlManagerGetUrlRewrite2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerListUrlRewrites
     *
     * List Url Rewrites.
     *
     */
    public function testUrlManagerListUrlRewrites()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerListUrlRewrites2
     *
     * List Url Rewrites.
     *
     */
    public function testUrlManagerListUrlRewrites2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerListUrlRewritesByTargetPaths
     *
     * List Url Rewrites By Target Paths.
     *
     */
    public function testUrlManagerListUrlRewritesByTargetPaths()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerListUrlRewritesByTargetPaths2
     *
     * List Url Rewrites By Target Paths.
     *
     */
    public function testUrlManagerListUrlRewritesByTargetPaths2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerResolveUrlRewrite
     *
     * Resolve Url Rewrite.
     *
     */
    public function testUrlManagerResolveUrlRewrite()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for urlManagerResolveUrlRewrite2
     *
     * Resolve Url Rewrite.
     *
     */
    public function testUrlManagerResolveUrlRewrite2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
